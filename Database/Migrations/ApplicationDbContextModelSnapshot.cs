// <auto-generated />
using System;
using CliveBot.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CliveBot.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CliveBot.Database.Models.BotModerator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConnectionSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PermissionsId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PermissionsId")
                        .IsUnique();

                    b.ToTable("BotModerators");
                });

            modelBuilder.Entity("CliveBot.Database.Models.BotModeratorPermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllPermissions")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManageCharacterInfo")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManageCharacterNotes")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManageCharacters")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManageModerators")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManageSkillInfo")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManageSkillTranslations")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManageSkills")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("BotModeratorPermissions");
                });

            modelBuilder.Entity("CliveBot.Database.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("CliveBot.Database.Models.CharacterNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NoteDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NoteName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviewImageUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterNotes");
                });

            modelBuilder.Entity("CliveBot.Database.Models.CharacterVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<bool>("DefaultVariant")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FromYear")
                        .HasColumnType("integer");

                    b.Property<string>("PreviewImageUrl")
                        .HasColumnType("text");

                    b.Property<int>("ToYear")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterVariants");
                });

            modelBuilder.Entity("CliveBot.Database.Models.CharacterVariantField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("VariantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.ToTable("CharacterVariantFields");
                });

            modelBuilder.Entity("CliveBot.Database.Models.SkillDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cooldown")
                        .HasColumnType("text");

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<string>("Mastery")
                        .HasColumnType("text");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.Property<string>("Upgrade")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SkillId")
                        .IsUnique();

                    b.ToTable("SkillDetail");
                });

            modelBuilder.Entity("CliveBot.Database.Models.SkillDetailTechniques", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SkillDetailId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SkillDetailId");

                    b.ToTable("SkillDetailTechniques");
                });

            modelBuilder.Entity("CliveBot.Database.Models.SkillLanguageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillLanguages");
                });

            modelBuilder.Entity("CliveBot.Database.Models.SkillModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int>("CostBuy")
                        .HasColumnType("integer");

                    b.Property<int>("CostMaster")
                        .HasColumnType("integer");

                    b.Property<int>("CostUpgrade")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviewImageUrl")
                        .HasColumnType("text");

                    b.Property<int>("RatingMagical")
                        .HasColumnType("integer");

                    b.Property<int>("RatingPhysical")
                        .HasColumnType("integer");

                    b.Property<int>("Summon")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("CliveBot.Database.Models.BotModerator", b =>
                {
                    b.HasOne("CliveBot.Database.Models.BotModeratorPermissions", "Permissions")
                        .WithOne("Moderator")
                        .HasForeignKey("CliveBot.Database.Models.BotModerator", "PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CliveBot.Database.Models.CharacterNote", b =>
                {
                    b.HasOne("CliveBot.Database.Models.Character", "Character")
                        .WithMany("Notes")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("CliveBot.Database.Models.CharacterVariant", b =>
                {
                    b.HasOne("CliveBot.Database.Models.Character", "Character")
                        .WithMany("Variants")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("CliveBot.Database.Models.CharacterVariantField", b =>
                {
                    b.HasOne("CliveBot.Database.Models.CharacterVariant", "Variant")
                        .WithMany("AdditionalFields")
                        .HasForeignKey("VariantId");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("CliveBot.Database.Models.SkillDetail", b =>
                {
                    b.HasOne("CliveBot.Database.Models.SkillModel", "Skill")
                        .WithOne("Detail")
                        .HasForeignKey("CliveBot.Database.Models.SkillDetail", "SkillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("CliveBot.Database.Models.SkillDetailTechniques", b =>
                {
                    b.HasOne("CliveBot.Database.Models.SkillDetail", "SkillDetail")
                        .WithMany("BattleTechniques")
                        .HasForeignKey("SkillDetailId");

                    b.Navigation("SkillDetail");
                });

            modelBuilder.Entity("CliveBot.Database.Models.SkillLanguageModel", b =>
                {
                    b.HasOne("CliveBot.Database.Models.SkillModel", "Skill")
                        .WithMany("Localized")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("CliveBot.Database.Models.BotModeratorPermissions", b =>
                {
                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("CliveBot.Database.Models.Character", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("CliveBot.Database.Models.CharacterVariant", b =>
                {
                    b.Navigation("AdditionalFields");
                });

            modelBuilder.Entity("CliveBot.Database.Models.SkillDetail", b =>
                {
                    b.Navigation("BattleTechniques");
                });

            modelBuilder.Entity("CliveBot.Database.Models.SkillModel", b =>
                {
                    b.Navigation("Detail")
                        .IsRequired();

                    b.Navigation("Localized");
                });
#pragma warning restore 612, 618
        }
    }
}
